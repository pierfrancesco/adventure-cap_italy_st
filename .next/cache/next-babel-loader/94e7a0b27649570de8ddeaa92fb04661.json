{"ast":null,"code":"/* CONFIGS */\nimport appConfig from '../appConfig.json';\n/* CLASSES */\n\nimport Player from '../classes/Player';\n/* MODELS */\n\nimport Errors from '../models/Errors';\n/* CONTROLLERS */\n\nimport { getCurrentPlayerInstance } from './PlayerManager';\n/* GLOBALS */\n\nlet isLsEnabled;\nlet savingRequestLock;\n/**\n * Check if localStorage is Enabled\n * @returns {boolean}\n */\n\nconst checkIfLocalStorageIsEnabled = () => {\n  const test = 'TEST';\n\n  try {\n    window.localStorage.setItem(test, test);\n    window.localStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n/**\n * Save player progress inside localstorage\n * @returns {Promise<boolean>}\n */\n\n\nconst savePlayerToLocalStorage = () => {\n  // is localstorage enabled? if false throw an error\n  if (isLsEnabled !== true && !checkIfLocalStorageIsEnabled()) throw Errors.LOCAL_STORAGE_NOT_SUPPORTED;\n  isLsEnabled = true; // save the player object inside the localStorage\n\n  if (!savingRequestLock) {\n    savingRequestLock = true;\n    setTimeout(() => {\n      let currentPlayerInstance = getCurrentPlayerInstance();\n      window.localStorage.setItem(appConfig.LOCAL_STORAGE_KEYS.PLAYER, btoa(currentPlayerInstance.export()));\n      savingRequestLock = false;\n    }, appConfig.PLAYER_CONFIG.MAX_FREQUENCY_SECONDS_DELTA_FOR_LS_SAVING * 1000);\n  }\n\n  return {\n    success: true\n  };\n};\n/**\n * Retrieve player from localStorage\n * @returns {Player}\n */\n\n\nconst retrievePlayerFromLocalStorage = () => {\n  // is localstorage enabled? if false throw an error\n  if (isLsEnabled !== true && !checkIfLocalStorageIsEnabled()) throw Errors.LOCAL_STORAGE_NOT_SUPPORTED; // save the player object inside the localStorage\n\n  const playerRawDataFromLS = window.localStorage.getItem(appConfig.LOCAL_STORAGE_KEYS.PLAYER);\n  if (playerRawDataFromLS === null) throw Errors.PLAYER_NOT_FOUND_IN_LOCAL_STORAGE; // check if player retrieved has a valid object structure\n\n  try {\n    const {\n      id,\n      name,\n      money,\n      businesses\n    } = JSON.parse(atob(playerRawDataFromLS));\n    if (typeof id !== \"string\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n    if (typeof name !== \"string\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n    if (typeof money !== \"number\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n    if (typeof businesses !== \"object\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n    return new Player(id, name, money, businesses, Date.now());\n  } catch (e) {\n    throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n  }\n};\n\nexport { checkIfLocalStorageIsEnabled, savePlayerToLocalStorage, retrievePlayerFromLocalStorage };","map":{"version":3,"sources":["/Users/pierfrancescodorsogna/Documents/PROJECTS/adventure-cap_italy_st/controllers/StorageManager.js"],"names":["appConfig","Player","Errors","getCurrentPlayerInstance","isLsEnabled","savingRequestLock","checkIfLocalStorageIsEnabled","test","window","localStorage","setItem","removeItem","e","savePlayerToLocalStorage","LOCAL_STORAGE_NOT_SUPPORTED","setTimeout","currentPlayerInstance","LOCAL_STORAGE_KEYS","PLAYER","btoa","export","PLAYER_CONFIG","MAX_FREQUENCY_SECONDS_DELTA_FOR_LS_SAVING","success","retrievePlayerFromLocalStorage","playerRawDataFromLS","getItem","PLAYER_NOT_FOUND_IN_LOCAL_STORAGE","id","name","money","businesses","JSON","parse","atob","GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE","Date","now"],"mappings":"AAAA;AACA,OAAOA,SAAP,MAAsB,mBAAtB;AACA;;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA;;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA;;AACA,SAASC,wBAAT,QAAyC,iBAAzC;AAEA;;AACA,IAAIC,WAAJ;AACA,IAAIC,iBAAJ;AAEA;AACA;AACA;AACA;;AACA,MAAMC,4BAA4B,GAAG,MAAM;AACzC,QAAMC,IAAI,GAAG,MAAb;;AACA,MAAI;AACFC,IAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BH,IAA5B,EAAkCA,IAAlC;AACAC,IAAAA,MAAM,CAACC,YAAP,CAAoBE,UAApB,CAA+BJ,IAA/B;AACA,WAAO,IAAP;AACD,GAJD,CAIE,OAAOK,CAAP,EAAU;AACV,WAAO,KAAP;AACD;AACF,CATD;AAWA;AACA;AACA;AACA;;;AACA,MAAMC,wBAAwB,GAAG,MAAM;AAErC;AACA,MAAIT,WAAW,KAAK,IAAhB,IAAwB,CAACE,4BAA4B,EAAzD,EAA6D,MAAMJ,MAAM,CAACY,2BAAb;AAC7DV,EAAAA,WAAW,GAAG,IAAd,CAJqC,CAMrC;;AACA,MAAI,CAACC,iBAAL,EAAwB;AACtBA,IAAAA,iBAAiB,GAAG,IAApB;AACAU,IAAAA,UAAU,CAAC,MAAM;AACf,UAAIC,qBAAqB,GAAGb,wBAAwB,EAApD;AACAK,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BV,SAAS,CAACiB,kBAAV,CAA6BC,MAAzD,EAAiEC,IAAI,CAACH,qBAAqB,CAACI,MAAtB,EAAD,CAArE;AACAf,MAAAA,iBAAiB,GAAG,KAApB;AACD,KAJS,EAIPL,SAAS,CAACqB,aAAV,CAAwBC,yCAAxB,GAAoE,IAJ7D,CAAV;AAKD;;AAED,SAAO;AACLC,IAAAA,OAAO,EAAE;AADJ,GAAP;AAGD,CAnBD;AAqBA;AACA;AACA;AACA;;;AACA,MAAMC,8BAA8B,GAAG,MAAM;AAE3C;AACA,MAAIpB,WAAW,KAAK,IAAhB,IAAwB,CAACE,4BAA4B,EAAzD,EAA6D,MAAMJ,MAAM,CAACY,2BAAb,CAHlB,CAK3C;;AACA,QAAMW,mBAAmB,GAAGjB,MAAM,CAACC,YAAP,CAAoBiB,OAApB,CAA4B1B,SAAS,CAACiB,kBAAV,CAA6BC,MAAzD,CAA5B;AACA,MAAIO,mBAAmB,KAAK,IAA5B,EAAkC,MAAMvB,MAAM,CAACyB,iCAAb,CAPS,CAS3C;;AACA,MAAI;AACF,UAAM;AAACC,MAAAA,EAAD;AAAKC,MAAAA,IAAL;AAAWC,MAAAA,KAAX;AAAkBC,MAAAA;AAAlB,QAAgCC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACT,mBAAD,CAAf,CAAtC;AAEA,QAAI,OAAOG,EAAP,KAAc,QAAlB,EAA4B,MAAM1B,MAAM,CAACiC,uDAAb;AAC5B,QAAI,OAAON,IAAP,KAAgB,QAApB,EAA8B,MAAM3B,MAAM,CAACiC,uDAAb;AAC9B,QAAI,OAAOL,KAAP,KAAiB,QAArB,EAA+B,MAAM5B,MAAM,CAACiC,uDAAb;AAC/B,QAAI,OAAOJ,UAAP,KAAsB,QAA1B,EAAoC,MAAM7B,MAAM,CAACiC,uDAAb;AAEpC,WAAO,IAAIlC,MAAJ,CAAW2B,EAAX,EAAeC,IAAf,EAAqBC,KAArB,EAA4BC,UAA5B,EAAwCK,IAAI,CAACC,GAAL,EAAxC,CAAP;AAED,GAVD,CAUE,OAAOzB,CAAP,EAAU;AACV,UAAMV,MAAM,CAACiC,uDAAb;AACD;AACF,CAvBD;;AAyBA,SACE7B,4BADF,EAEEO,wBAFF,EAGEW,8BAHF","sourcesContent":["/* CONFIGS */\nimport appConfig from '../appConfig.json'\n/* CLASSES */\nimport Player from '../classes/Player'\n/* MODELS */\nimport Errors from '../models/Errors'\n/* CONTROLLERS */\nimport { getCurrentPlayerInstance } from './PlayerManager';\n\n/* GLOBALS */\nlet isLsEnabled;\nlet savingRequestLock;\n\n/**\n * Check if localStorage is Enabled\n * @returns {boolean}\n */\nconst checkIfLocalStorageIsEnabled = () => {\n  const test = 'TEST';\n  try {\n    window.localStorage.setItem(test, test);\n    window.localStorage.removeItem(test);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\n/**\n * Save player progress inside localstorage\n * @returns {Promise<boolean>}\n */\nconst savePlayerToLocalStorage = () => {\n\n  // is localstorage enabled? if false throw an error\n  if (isLsEnabled !== true && !checkIfLocalStorageIsEnabled()) throw Errors.LOCAL_STORAGE_NOT_SUPPORTED;\n  isLsEnabled = true;\n\n  // save the player object inside the localStorage\n  if (!savingRequestLock) {\n    savingRequestLock = true;\n    setTimeout(() => {\n      let currentPlayerInstance = getCurrentPlayerInstance();\n      window.localStorage.setItem(appConfig.LOCAL_STORAGE_KEYS.PLAYER, btoa(currentPlayerInstance.export()));\n      savingRequestLock = false;\n    }, appConfig.PLAYER_CONFIG.MAX_FREQUENCY_SECONDS_DELTA_FOR_LS_SAVING * 1000)\n  }\n\n  return {\n    success: true\n  };\n}\n\n/**\n * Retrieve player from localStorage\n * @returns {Player}\n */\nconst retrievePlayerFromLocalStorage = () => {\n\n  // is localstorage enabled? if false throw an error\n  if (isLsEnabled !== true && !checkIfLocalStorageIsEnabled()) throw Errors.LOCAL_STORAGE_NOT_SUPPORTED\n\n  // save the player object inside the localStorage\n  const playerRawDataFromLS = window.localStorage.getItem(appConfig.LOCAL_STORAGE_KEYS.PLAYER);\n  if (playerRawDataFromLS === null) throw Errors.PLAYER_NOT_FOUND_IN_LOCAL_STORAGE;\n\n  // check if player retrieved has a valid object structure\n  try {\n    const {id, name, money, businesses} = JSON.parse(atob(playerRawDataFromLS));\n\n    if (typeof id !== \"string\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n    if (typeof name !== \"string\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n    if (typeof money !== \"number\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n    if (typeof businesses !== \"object\") throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n\n    return new Player(id, name, money, businesses, Date.now());\n\n  } catch (e) {\n    throw Errors.GENERIC_ERROR_WHILE_RETRIVING_PLAYER_FROM_LOCAL_STORAGE;\n  }\n}\n\nexport {\n  checkIfLocalStorageIsEnabled,\n  savePlayerToLocalStorage,\n  retrievePlayerFromLocalStorage\n}\n"]},"metadata":{},"sourceType":"module"}