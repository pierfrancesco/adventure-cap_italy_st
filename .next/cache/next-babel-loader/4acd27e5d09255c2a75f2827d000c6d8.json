{"ast":null,"code":"/* CONFIGS */\nimport appConfig from '../appConfig.json';\n/* CLASSES */\n\nimport Player from '../classes/Player';\n/* CONTROLLERS */\n\nimport { retrievePlayerFromLocalStorage, savePlayerToLocalStorage } from './StorageManager';\n/* GLOBALS */\n\nvar CURRENT_PLAYER = {};\n/**\n *\n * @returns {string}\n */\n\nvar createID = function createID() {\n  return Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n};\n/**\n *\n * @returns {{}}\n */\n\n\nvar getCurrentPlayerInstance = function getCurrentPlayerInstance() {\n  return CURRENT_PLAYER;\n};\n/**\n *\n * @param name\n * @returns {Player}\n */\n\n\nvar createNewPlayer = function createNewPlayer(name) {\n  // create vars to assign\n  var ID = createID();\n  var initialAmountOfMoney = appConfig.PLAYER_CONFIG.INITIAL_AMOUNT_OF_MONEY;\n  var initialBusinesess = [];\n  var lastAccessed = Date.now(); // create new player\n\n  CURRENT_PLAYER = new Player(ID, name, initialAmountOfMoney, initialBusinesess, lastAccessed); // save player instance in the localStorage\n\n  savePlayerToLocalStorage();\n  return CURRENT_PLAYER;\n};\n/**\n *\n * @param sendWelcomeMessage\n * @returns {Player}\n */\n\n\nvar initPlayer = function initPlayer(sendWelcomeMessage) {\n  try {\n    CURRENT_PLAYER = retrievePlayerFromLocalStorage();\n  } catch (e) {\n    var defaultName = 'JohnDoe_' + Date.now();\n    CURRENT_PLAYER = createNewPlayer(defaultName);\n  } // calculate money while you where away\n\n\n  calculateRevenueWhileAway(sendWelcomeMessage);\n  return CURRENT_PLAYER;\n};\n/**\n *\n * @param sendWelcomeMessage\n */\n\n\nvar calculateRevenueWhileAway = function calculateRevenueWhileAway(sendWelcomeMessage) {\n  var moneyToAssign = 0; // 1. take all business with manager\n\n  CURRENT_PLAYER.businesses.forEach(function (elem) {\n    if (elem.HAS_MANAGER && elem.LAST_TRANSACTION_TIMESTAMP !== 0) {\n      // 2. take last transaction\n      var secondsAfterLastTransaction = Date.now() - elem.LAST_TRANSACTION_TIMESTAMP;\n      elem.LAST_TRANSACTION_TIMESTAMP = Date.now();\n      var minTimeToDeliverGood = elem.SECONDS_TO_DELIVER_GOOD;\n      var pricingModel = elem.SINGLE_ITEM_PRICE * elem.CURRENT_LEVEL; // if last transaction for this shop has been gt than seconds to deliver assign it\n\n      if (secondsAfterLastTransaction >= minTimeToDeliverGood) {\n        var itemsCollectedWhileAway = parseInt(secondsAfterLastTransaction / minTimeToDeliverGood / 1000);\n        moneyToAssign += itemsCollectedWhileAway * pricingModel;\n      }\n    }\n  });\n\n  if (moneyToAssign > 0) {\n    CURRENT_PLAYER.money += moneyToAssign;\n    savePlayerToLocalStorage();\n    if (typeof sendWelcomeMessage === \"function\") sendWelcomeMessage(\"While away you collect:\".concat(moneyToAssign, \" $\"));\n  }\n};\n/**\n *\n * @param newMoney\n * @param businessId\n */\n\n\nvar updateMoney = function updateMoney(newMoney, businessId) {\n  //  TODO: check if they are int and businessId is defined\n  CURRENT_PLAYER.money += newMoney;\n  CURRENT_PLAYER.businesses.map(function (elem) {\n    if (elem.ID === businessId) {\n      elem.LAST_TRANSACTION_TIMESTAMP = Date.now();\n      elem.LAST_ONGOING_SECONDS_TRANSACTION = 0;\n    }\n  });\n  savePlayerToLocalStorage();\n};\n/**\n *\n * @returns {*}\n */\n\n\nvar getMoney = function getMoney() {\n  return CURRENT_PLAYER.money;\n};\n\nexport { createNewPlayer, initPlayer, updateMoney, getMoney, getCurrentPlayerInstance, CURRENT_PLAYER };","map":{"version":3,"sources":["/Users/pierfrancescodorsogna/Documents/PROJECTS/adventure-cap_italy_st/controllers/PlayerManager.js"],"names":["appConfig","Player","retrievePlayerFromLocalStorage","savePlayerToLocalStorage","CURRENT_PLAYER","createID","Math","random","toString","substring","getCurrentPlayerInstance","createNewPlayer","name","ID","initialAmountOfMoney","PLAYER_CONFIG","INITIAL_AMOUNT_OF_MONEY","initialBusinesess","lastAccessed","Date","now","initPlayer","sendWelcomeMessage","e","defaultName","calculateRevenueWhileAway","moneyToAssign","businesses","forEach","elem","HAS_MANAGER","LAST_TRANSACTION_TIMESTAMP","secondsAfterLastTransaction","minTimeToDeliverGood","SECONDS_TO_DELIVER_GOOD","pricingModel","SINGLE_ITEM_PRICE","CURRENT_LEVEL","itemsCollectedWhileAway","parseInt","money","updateMoney","newMoney","businessId","map","LAST_ONGOING_SECONDS_TRANSACTION","getMoney"],"mappings":"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","sourcesContent":["/* CONFIGS */\nimport appConfig from '../appConfig.json';\n/* CLASSES */\nimport Player from '../classes/Player';\n/* CONTROLLERS */\nimport { retrievePlayerFromLocalStorage, savePlayerToLocalStorage } from './StorageManager';\n\n/* GLOBALS */\nlet CURRENT_PLAYER = {};\n\n/**\n *\n * @returns {string}\n */\nconst createID = () =>\n  Math.random().toString(36).substring(2, 15) + Math.random().toString(36).substring(2, 15);\n\n/**\n *\n * @returns {{}}\n */\nconst getCurrentPlayerInstance = () => CURRENT_PLAYER;\n\n/**\n *\n * @param name\n * @returns {Player}\n */\nconst createNewPlayer = (name) => {\n\n  // create vars to assign\n  const ID = createID();\n  const initialAmountOfMoney = appConfig.PLAYER_CONFIG.INITIAL_AMOUNT_OF_MONEY;\n  const initialBusinesess = [];\n  const lastAccessed = Date.now();\n\n  // create new player\n  CURRENT_PLAYER = new Player(ID, name, initialAmountOfMoney, initialBusinesess, lastAccessed);\n\n  // save player instance in the localStorage\n  savePlayerToLocalStorage();\n\n  return CURRENT_PLAYER;\n}\n\n/**\n *\n * @param sendWelcomeMessage\n * @returns {Player}\n */\nconst initPlayer = (sendWelcomeMessage) => {\n\n  try {\n    CURRENT_PLAYER = retrievePlayerFromLocalStorage();\n  } catch (e) {\n    const defaultName = 'JohnDoe_' + Date.now();\n    CURRENT_PLAYER = createNewPlayer(defaultName)\n  }\n\n  // calculate money while you where away\n  calculateRevenueWhileAway(sendWelcomeMessage);\n\n  return CURRENT_PLAYER;\n\n}\n\n/**\n *\n * @param sendWelcomeMessage\n */\nconst calculateRevenueWhileAway = (sendWelcomeMessage) => {\n\n  let moneyToAssign = 0;\n\n  // 1. take all business with manager\n  CURRENT_PLAYER.businesses.forEach(elem => {\n\n    if (elem.HAS_MANAGER && elem.LAST_TRANSACTION_TIMESTAMP !== 0) {\n      // 2. take last transaction\n      const secondsAfterLastTransaction = Date.now() - elem.LAST_TRANSACTION_TIMESTAMP;\n      elem.LAST_TRANSACTION_TIMESTAMP = Date.now();\n      const minTimeToDeliverGood = elem.SECONDS_TO_DELIVER_GOOD;\n      const pricingModel = elem.SINGLE_ITEM_PRICE * elem.CURRENT_LEVEL;\n\n      // if last transaction for this shop has been gt than seconds to deliver assign it\n      if (secondsAfterLastTransaction >= minTimeToDeliverGood) {\n        const itemsCollectedWhileAway = parseInt((secondsAfterLastTransaction / minTimeToDeliverGood) / 1000);\n        moneyToAssign += itemsCollectedWhileAway * (pricingModel);\n      }\n    }\n  });\n\n  if (moneyToAssign > 0) {\n    CURRENT_PLAYER.money += moneyToAssign;\n    savePlayerToLocalStorage();\n    if (typeof sendWelcomeMessage === \"function\") sendWelcomeMessage(`While away you collect:${moneyToAssign} $`);\n  }\n}\n\n/**\n *\n * @param newMoney\n * @param businessId\n */\nconst updateMoney = (newMoney, businessId) => {\n  //  TODO: check if they are int and businessId is defined\n  CURRENT_PLAYER.money += newMoney;\n  CURRENT_PLAYER.businesses.map(elem => {\n    if (elem.ID === businessId) {\n      elem.LAST_TRANSACTION_TIMESTAMP = Date.now();\n      elem.LAST_ONGOING_SECONDS_TRANSACTION = 0;\n    }\n  });\n  savePlayerToLocalStorage();\n}\n\n/**\n *\n * @returns {*}\n */\nconst getMoney = () => CURRENT_PLAYER.money;\n\nexport {\n  createNewPlayer,\n  initPlayer,\n  updateMoney,\n  getMoney,\n  getCurrentPlayerInstance,\n  CURRENT_PLAYER\n}\n\n\n\n"]},"metadata":{},"sourceType":"module"}